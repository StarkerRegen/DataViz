(function (React$1, ReactDOM, d3) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const getData = (csvUrl) => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = (d) => {
        // 将字符串转换为数字
        d.Population = +d['2020'] * 1000;
        return d;
      };
      d3.csv(csvUrl, row).then((data) => {
        setData(data.slice(0, 10));
      });
    }, []);
    return data;
  };

  const AxisBottom = ({xScale, innerHeight, tickFormat}) =>
    xScale.ticks().map((tickValue) => (
      React.createElement( 'g', { className: "tick", transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight, stroke: "gray" }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + 5 },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ width, yScale }) =>
    yScale.domain().map((tickValue) => (
      React.createElement( 'g', { className: "tick" },
        React.createElement( 'foreignObject', {
          x: -width, y: yScale(tickValue) - yScale.bandwidth() / 4, width: width, height: yScale.bandwidth() * 2 },
          React.createElement( 'p', { key: tickValue, align: "right" }, tickValue)
        )
      )
    ));

  const Bars = ({
    data,
    xScale,
    yScale,
    xValue,
    yValue,
    tooltipsFormat
  }) =>
    data.map((d) => (
      React.createElement( 'rect', {
        className: "mark", key: yValue(d), y: yScale(yValue(d)), width: xScale(xValue(d)), height: yScale.bandwidth() },
        React.createElement( 'title', null, tooltipsFormat(xValue(d)) )
      )
    ));

  const csvUrl =
    'https://gist.githubusercontent.com/curran/0ac4077c7fc6390f5dd33bf5c06cb5ff/raw/605c54080c7a93a417a3cea93fd52e7550e76500/UN_Population_2019.csv';

  const width = 960;
  const height = 500;
  const margin = {
    top: 20,
    right: 20,
    bottom: 60,
    left: 100,
  };

  const App = () => {
    const data = getData(csvUrl);
    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;

    const yValue = (d) => d.Country;
    const xValue = (d) => d.Population;

    const yScale = d3.scaleBand()
      .domain(data.map(yValue))
      .range([0, innerHeight])
      .paddingInner(0.2);

    const xScale = d3.scaleLinear()
      .domain([0, d3.max(data, xValue)])
      .range([0, innerWidth]);

    const sFormat = d3.format('.2s');
    const xAxisTickFormat = (tickValue) => sFormat(tickValue).replace('G', 'B');
    
    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( 'g', {
          transform: `translate(${margin.left},${margin.top})` },
          React$1__default.createElement( AxisBottom, {
            xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat }),
          React$1__default.createElement( AxisLeft, { width: margin.left, yScale: yScale }),
          React$1__default.createElement( 'text', {
            className: "axis-label", x: innerWidth / 2, y: innerHeight + 50, textAnchor: "middle" }, "Population"),
          React$1__default.createElement( Bars, {
            data: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, tooltipsFormat: xAxisTickFormat })
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,